name: CI Workflow

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  setup-backend:
    name: üì• Install Backend Dependencies
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
      APP_DEBUG: 1

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          tools: composer:v2
          coverage: none

      - name: Cache Composer Packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: app/back/vendor
          key: ${{ runner.os }}-php-${{ hashFiles('app/back/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Copy .env.example
        run: cp .env.example .env
        working-directory: app/back

      - name: Install Backend Dependencies
        run: composer install --no-cache --prefer-dist --no-progress --no-interaction
        working-directory: app/back

  setup-frontend:
    name: üì• Install Frontend Dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: app/front

      - name: Install Frontend Dependencies
        run: npm install --no-cache
        working-directory: app/front

  backend-code-quality:
    name: üé® Backend Code Quality
    runs-on: ubuntu-latest
    needs: setup-backend

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Restore Composer Cache
        uses: actions/cache@v3
        with:
          path: app/back/vendor
          key: ${{ runner.os }}-php-${{ hashFiles('app/back/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Fix PHP Code Style
        run: vendor/bin/phpcbf --standard=PSR12 src/
        working-directory: app/back # ‚úÖ D√©finit le bon dossier

      - name: Run PHP_CodeSniffer
        run: vendor/bin/phpcs --standard=PSR12 src/
        working-directory: app/back # ‚úÖ D√©finit le bon dossier

      - name: Run PHPStan
        run: vendor/bin/phpstan analyse -c phpstan.dist.neon --no-progress
        working-directory: app/back # ‚úÖ D√©finit le bon dossier

  frontend-code-quality:
    name: üé® Frontend Code Quality
    runs-on: ubuntu-latest
    needs: setup-frontend

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Restore Node Modules Cache
        uses: actions/cache@v3
        with:
          path: app/front/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('app/front/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Check if node_modules is restored
        run: |
          echo "Listing node_modules directory"
          ls -l app/front/node_modules || echo "node_modules not found"

      - name: Install Frontend Dependencies (if not cached)
        run: npm install --no-cache
        working-directory: app/front

      - name: Run ESLint Check
        run: npm run lint
        working-directory: app/front

  frontend-build:
    name: üèóÔ∏è Build Frontend
    runs-on: ubuntu-latest
    needs: [frontend-code-quality, backend-code-quality]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Restore Node Modules Cache
        uses: actions/cache@v3
        with:
          path: app/front/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('app/front/package-lock.json') }}

      - name: Build Frontend
        run: npm run build
        working-directory: app/front # ‚úÖ D√©finit le bon dossier
